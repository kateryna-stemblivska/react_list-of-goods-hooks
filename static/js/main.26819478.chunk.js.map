{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","byDefault","sortBy","setSortBy","toggleReversed","setToggleReversed","sortedGoods","goods","preparedGoods","sort","good1","good2","sortByAlph","localeCompare","sortByLength","length","reverse","getPreparedGoods","className","onClick","type","cn","currentValue","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,4BAAAA,E,sBAAAA,E,cAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,WAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4CH,oBAAS,GAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KAEMC,EAjCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,WACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,aACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOaS,CAAiBnB,EAAiBI,EAAQE,GAW9D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAUN,EAASe,aAClCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYnB,IAAWL,EAASe,aAJpC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAUN,EAASiB,eAClCM,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYnB,IAAWL,EAASiB,eAJpC,4BAUA,wBACEK,QAjCiB,kBACvBd,GAAkB,SAAAiB,GAAY,OAAKA,MAiC7BF,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAajB,IAJjB,sBAUEF,GAAUE,IACV,wBACEe,QAxCO,WACfhB,EAAUN,EAASI,WACnBI,GAAkB,IAuCVe,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC/GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.26819478.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  sortByAlph = 'alphabetically',\n  sortByLength = 'length',\n  byDefault = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortBy: SortType,\n  toggleReversed: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.sortByAlph:\n          return good1.localeCompare(good2);\n\n        case SortType.sortByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (toggleReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortType.byDefault);\n  const [toggleReversed, setToggleReversed] = useState(false);\n\n  const sortedGoods = getPreparedGoods(goodsFromServer, sortBy, toggleReversed);\n\n  const getReversedGoods = () => (\n    setToggleReversed(currentValue => !currentValue)\n  );\n\n  const getReset = () => {\n    setSortBy(SortType.byDefault);\n    setToggleReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortBy(SortType.sortByAlph)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortBy !== SortType.sortByAlph,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortBy(SortType.sortByLength)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortBy !== SortType.sortByLength,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={getReversedGoods}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !toggleReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortBy || toggleReversed) && (\n          <button\n            onClick={getReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}